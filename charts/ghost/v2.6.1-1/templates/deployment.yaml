apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ghost.fullname" . }}
  labels:
    app: "{{ template "ghost.fullname" . }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      release: "{{ .Release.Name }}"
      app: "{{ template "postgresql.fullname" . }}"
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ template "ghost.fullname" . }}"
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      terminationGracePeriodSeconds: 30
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      containers:
      - name: ghost
        image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        env:
        - name: url
          value: "https://{{ .Values.ghost.dns }}"
        - name: database
          value: pg
        - name: database__connection__host
          value: {{ template "ghost.postgresql.fullname" . }}
        - name: database__connection__port
          value: "5432"
        - name: database__connection__database
          value: {{ .Values.postgresql.db.name | quote }}
        - name: database__connection__user
          value: {{ .Values.postgresql.db.user | quote }}
        - name: database__connection__password
          valueFrom:
            secretKeyRef:
              name: {{ template "ghost.postgresql.fullname" . }}
              key: postgresql-password
        - name: NODE_ENV
          value: "production"
        ports:
        - name: ghost
          containerPort: 2368
        #livenessProbe:
        #  httpGet:
        #    path: /
        #    port: ghost
        #    scheme: HTTPS
        #  initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
        #  periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
        #  timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        #  successThreshold: {{ .Values.livenessProbe.successThreshold }}
        #  failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        #readinessProbe:
        #  httpGet:
        #    path: /
        #    port: ghost
        #    scheme: HTTPS
        #  initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
        #  periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        #  timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        # successThreshold: {{ .Values.readinessProbe.successThreshold }}
        #  failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- if .Values.resources }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        {{- end}}
        volumeMounts:
        - name: ghost-data
          mountPath: /var/lib/ghost/content
      volumes:
      - name: ghost-data
        persistentVolumeClaim:
          claimName: {{ template "ghost.fullname" . }}
